name: Build Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            name: goldentooth-agent-x86_64-linux
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
            name: goldentooth-agent-aarch64-linux
          - target: x86_64-apple-darwin
            os: macos-latest
            name: goldentooth-agent-x86_64-darwin
          - target: aarch64-apple-darwin
            os: macos-latest
            name: goldentooth-agent-aarch64-darwin
    steps:
    - uses: actions/checkout@v4

    - name: Get version from git tag
      id: version
      run: |
        # Get the latest tag, fallback to workflow_dispatch case
        if [ "${{ github.event_name }}" = "push" ] && [ -n "${{ github.ref_name }}" ]; then
          TAG_NAME=${{ github.ref_name }}
        else
          TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        fi
        VERSION=${TAG_NAME#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

    - name: Update Cargo.toml version
      run: |
        sed -i.bak 's/^version = ".*"/version = "${{ steps.version.outputs.version }}"/' Cargo.toml
        echo "Updated Cargo.toml version to ${{ steps.version.outputs.version }}"
        head -10 Cargo.toml

    - name: Setup Rust with cache
      uses: ./.github/actions/setup-rust-with-cache
      with:
        toolchain: 1.86.0
        targets: ${{ matrix.target }}
        components: clippy
        cache-key-suffix: -release-${{ matrix.target }}

    - name: Install cross-compilation dependencies (Linux)
      if: contains(matrix.os, 'ubuntu') && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build release binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/goldentooth-agent.exe artifacts/${{ matrix.name }}.exe
        else
          cp target/${{ matrix.target }}/release/goldentooth-agent artifacts/${{ matrix.name }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: artifacts/
        retention-days: 30

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Get version from git tag
      id: version
      run: |
        # Get the latest tag, fallback to workflow_dispatch case
        if [ "${{ github.event_name }}" = "push" ] && [ -n "${{ github.ref_name }}" ]; then
          TAG_NAME=${{ github.ref_name }}
        else
          TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        fi
        VERSION=${TAG_NAME#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

    - name: Delete existing release if it exists
      run: |
        gh release view ${{ steps.version.outputs.tag }} >/dev/null 2>&1 && gh release delete ${{ steps.version.outputs.tag }} --yes || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release
      run: |
        gh release create ${{ steps.version.outputs.tag }} \
          --title "Release ${{ steps.version.outputs.version }}" \
          --notes "Automated release of goldentooth-agent ${{ steps.version.outputs.version }}

        - Intelligent agent for Goldentooth cluster management
        - Cross-platform binaries (Linux x86_64/aarch64, macOS x86_64/Apple Silicon)
        - Automated CI/CD with tag-based releases" \
          --latest \
          release-artifacts/*/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
